/* Copy + continuation of 10responsivedesign */

/* Often, we want to display different images (or, really, the same image
    but of a different size/resolution, depending on what screen size the
    user has. 
   The easiest way is to use .svg images, which are vector-based. Vector-
    based images scale to any size.
   Raster images (aka pixle-based), like .png, .jpg, and .gif are more
    sensitive to screen resolution and must be handled differently.
   The "lazy" way to handle raster images is just to use high-res images
    everywhere, even on small screens. Pro: everything is highres and pretty.
    Con: Costs a lot of bandwith for no value, it's wasteful and unoptimized.
   Also, some screens/layouts would prefer different aspect ratios, which
    can't be covered by only one image file. (Or can it?)
   3 scenarios for optimizing responsive images: 
    - A standard-res screen, doesn't need a highres image.
    - A retina screen, can use but may not need a highres image. Can optimize
      when using very large images.
    - A desktop layout that's different from your mobile layout, where you
      want different aspect ratios for different devices.
   HTML's <img srcset='<filepath/name> <pixel density descriptor>' />
    https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images
    ex: <img src='images/illustration-small.png'
             srcset='images/illustration-small.png 1x,
                     images/illustration-big.png 2x' />
    or: srcset='images/illustration-small.png 2000w', where '2000w' means 
    2000 pixels wide 
    
   */

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Apply these styles in all contexts */
.page {
    display: flex;
    flex-wrap: wrap; /* fits div boxes into available space */
}

.section {
    display: flex;
    justify-content: center;
    align-items: center;

    width: 100%;
    height: 200px;
}

.menu {
    background-color: navy;
    height: 100px;
}
.header {
    background-color: cornflowerblue;
    height:auto;
    justify-content: inherit;
    align-items: inherit;
}
.photosrcset img {
    display: none;
    /* display: block; commment this line out to demonstrate <picture> */
    width: 100%;
}
.photopicture img {
    /* display: none; */
    display: block; /* comment this line out to demonstrate srcset */
    width: 100%;
}
.content {
    background-color: lightgrey;
    height: 600px;
}
.sign-up {
    background-color: lightsalmon;
}
.feature-1 {
    background-color: pink;
}
.feature-2 {
    background-color: gold;
}
.feature-3 {
    background-color: lightseagreen;
}
.illustration img {
    width: 100%;
    /* when using the .png and the new div, now needs: */
    display: block;
}

/* Mobile styles */
@media only screen and (max-width: 520px) {
    body {
        background-color: brown;
    }
}

/* Tablet styles */
@media only screen and (min-width: 521px) and (max-width: 960px) {
    body {
        background-color: goldenrod; }

    /* Setting these 4 divs to 50% each will create a 4x4 grid */
    .sign-up, .feature-1, .feature-2, .feature-3 {
        width: 50%;
    }
}

/* Desktop styles */
@media only screen and (min-width: 961px) {
    body {
        background-color: cornflowerblue; }
    .page {
        width: 960px;
        margin: 0 auto;
    }
    .feature-1, .feature-3 {
        width: 33.3%;
    }
    .feature-2 {
        width: 33.4%;
    }
    .header {
        height: 400px;
    }
    /* Use order:1&2 to change which divs come first. Recall that the 
       default order # is 0, so the feature divs, which haven't changed, 
       now appear above sign-up (#1) and content (#2). */
    .sign-up {
        height: 200px;
        order: 1
    }
    .content {
        order: 2;
    }
}